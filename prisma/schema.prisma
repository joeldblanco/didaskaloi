// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ USER & AUTHENTICATION ============

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   // bcrypt hash
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedProjects      Project[]        @relation("ProjectOwner")
  projectMemberships ProjectMember[]

  @@map("users")
}

// ============ PROJECTS & COLLABORATION ============

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  ownerId     Int
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     ProjectMember[]
  inviteCodes InviteCode[]
  classes     Class[]
  ageRanges   AgeRange[]

  @@map("projects")
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role     @default(VIEWER)
  joinedAt  DateTime @default(now())

  @@unique([userId, projectId])
  @@map("project_members")
}

model InviteCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique // Código de invitación único
  projectId Int
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role      // Rol que se asignará al unirse
  password  String?   // bcrypt hash - password del código (obligatorio para EDITOR, opcional para VIEWER)
  expiresAt DateTime? // Fecha de expiración (opcional)
  maxUses   Int?      // Número máximo de usos (opcional)
  usedCount Int       @default(0)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())

  @@map("invite_codes")
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

// ============ CORE MODELS (Updated with projectId) ============

model Class {
  id          Int          @id @default(autoincrement())
  name        String
  projectId   Int
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  students    Student[]
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("classes")
}

model Student {
  id                Int                @id @default(autoincrement())
  firstName         String
  lastName          String
  gender            Gender
  age               Int
  classId           Int
  class             Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  attendanceRecords AttendanceRecord[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("students")
}

model Attendance {
  id        Int                @id @default(autoincrement())
  date      DateTime           @db.Date
  classId   Int
  class     Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  records   AttendanceRecord[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([date, classId])
  @@map("attendances")
}

model AttendanceRecord {
  id           Int        @id @default(autoincrement())
  present      Boolean
  studentId    Int
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attendanceId Int
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([studentId, attendanceId])
  @@map("attendance_records")
}

model AgeRange {
  id        Int      @id @default(autoincrement())
  label     String
  minAge    Int
  maxAge    Int
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("age_ranges")
}

enum Gender {
  M
  F
}
